{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lando\\\\Documents\\\\GitHub\\\\cop4331-helpinghand\\\\frontend\\\\src\\\\components\\\\volunteerpage\\\\volunteerpage.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport TaskCard from '../taskcard/taskcard.js';\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from '../../redux/actions';\nexport default function VolunteerPage(props) {\n  const location = useLocation();\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas]);\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach(task => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected]); //TODO: CALL API TO GET TASKS WITHIN THAT USER\n\n  const taskAdded = [{\n    id: \"4\",\n    name: \"Feed the Homeless 2.0\",\n    location: \"Downtown Orlando 2.0\",\n    miles: \"2.6 miles\",\n    description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 2.0\",\n    numVol: \"2\",\n    maxVol: \"2\",\n    done: \"false\"\n  }, {\n    id: \"5\",\n    name: \"Feed the Homeless 3.0\",\n    location: \"Downtown Orlando 3.0\",\n    miles: \"3.6 miles\",\n    description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 3.0\",\n    numVol: \"3\",\n    maxVol: \"4\",\n    done: \"false\"\n  }];\n\n  const handleSelect = id => {\n    let newSelected = { ...selected\n    };\n\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    }\n\n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      } //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n\n\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n\n    idTrack.current = id;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Appbar, {\n    title: \"Volunteer's Tasks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"space-between\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, taskAdded.map((task, index) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: \"Task\" + task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TaskCard, {\n    selected: selected[task.id],\n    handleSelected: handleSelect,\n    id: task.id,\n    task: task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })))));\n} // const mapStateToProps = (state) => {\n//   return {\n//     areas: state\n//   }\n// }\n// const mapDispatchToProps = { name: setAreas }\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(VolunteerPage)","map":{"version":3,"sources":["C:/Users/lando/Documents/GitHub/cop4331-helpinghand/frontend/src/components/volunteerpage/volunteerpage.js"],"names":["React","useState","useRef","useEffect","TaskCard","Grid","Appbar","useLocation","connect","setAreas","VolunteerPage","props","location","tasks","setTasks","selected","setSelected","idTrack","areas","length","index","state","Object","values","taskObj","forEach","task","id","taskAdded","name","miles","description","numVol","maxVol","done","handleSelect","newSelected","current","prop","map"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\r\nimport TaskCard from '../taskcard/taskcard.js'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Appbar from \"../appbar/appbar.js\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { setAreas } from '../../redux/actions';\r\n\r\nexport default function VolunteerPage(props) {\r\n  const location = useLocation();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [selected, setSelected] = useState({});\r\n  let idTrack = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (props.areas && props.areas.length > 0) {\r\n      let index = location.state | 0;\r\n      setTasks(props.areas[index].tasks);\r\n    }\r\n  }, [props.areas])\r\n\r\n  useEffect(() => {\r\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\r\n      let taskObj = {};\r\n      tasks.forEach((task) => taskObj[task.id] = false);\r\n      setSelected(taskObj);\r\n    }\r\n  }, [tasks, selected])\r\n\r\n\r\n  //TODO: CALL API TO GET TASKS WITHIN THAT USER\r\n  const taskAdded = [\r\n    {\r\n      id: \"4\",\r\n      name: \"Feed the Homeless 2.0\",\r\n      location: \"Downtown Orlando 2.0\",\r\n      miles:\"2.6 miles\",\r\n      description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 2.0\",\r\n      numVol: \"2\",\r\n      maxVol: \"2\",\r\n      done: \"false\"\r\n    },\r\n    {\r\n      id: \"5\",\r\n      name: \"Feed the Homeless 3.0\",\r\n      location: \"Downtown Orlando 3.0\",\r\n      miles:\"3.6 miles\",\r\n      description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 3.0\",\r\n      numVol: \"3\",\r\n      maxVol: \"4\",\r\n      done: \"false\"\r\n    }\r\n  ]\r\n\r\n  const handleSelect = (id) => {\r\n    let newSelected = { ...selected };\r\n    if (idTrack.current === null) {\r\n      idTrack.current = id;\r\n    } \r\n    if (selected[id]) {\r\n      // We are leaving the task\r\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\r\n      newSelected[id] = false;\r\n      setSelected(newSelected);\r\n    } else {\r\n      // We are joining the task\r\n      if (idTrack.current !== id) {\r\n        //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\r\n      }\r\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\r\n      for (const prop in newSelected) {\r\n        newSelected[prop] = false;\r\n      }\r\n      newSelected[id] = true;\r\n      setSelected(newSelected);\r\n    }\r\n    idTrack.current = id;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Appbar title=\"Volunteer's Tasks\" />\r\n      <Grid\r\n          container\r\n          direction=\"column\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n      >\r\n        {taskAdded.map((task, index) =>\r\n          <Grid item key={\"Task\"+task.id}>\r\n            <TaskCard selected={selected[task.id]} handleSelected={handleSelect} id={task.id} task={task}/>\r\n          </Grid>\r\n        )}\r\n      </Grid >\r\n    </div>\r\n  )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n    \r\n//     areas: state\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = { name: setAreas }\r\n\r\n// export default connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(VolunteerPage)\r\n"]},"metadata":{},"sourceType":"module"}