{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\julia\\\\OneDrive\\\\Documentos\\\\cop4331-helpinghand\\\\frontend\\\\src\\\\components\\\\volunteertaskspage\\\\volunteertasks.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport TaskCard from \"../volunteertaskcard/taskcard.js\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Appbar from \"../appbar/appbar.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from \"../../redux/actions\";\n\nconst buildPath = require(\"../../redux/buildPath\");\n\nexport default function VolunteerPage(props) {\n  const location = useLocation();\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n  var user_data = JSON.parse(localStorage.getItem(\"user_data\"));\n  var user_email = user_data.id;\n  console.log(user_email);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas]);\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach(task => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected]);\n  useEffect(() => {\n    async function handleSubmit() {\n      console.log(buildPath(\"/vol/tasks\"));\n      var obj = {\n        email: user_email\n      };\n      var js = JSON.stringify(obj);\n      console.log(js);\n\n      try {\n        const response = await fetch(buildPath(\"/vol/tasks\"), {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: js\n        });\n        var res = JSON.parse(await response.text());\n\n        if (res.error != null) {\n          console.log(res.error);\n        } else {\n          console.log(\"success\"); //this is a check because the page might render twice and cause the call to fail\n          //if the call fails and res is set then the structure is different from if it returned tasks\n          //and we cans use the same syntax to parse it with map\n\n          if (res != \"no such user found\") {\n            setPosts(res);\n          } else {\n            console.log(\"User not found error\");\n          }\n\n          return res;\n        }\n      } catch (e) {\n        alert(e.toString());\n        return;\n      }\n    }\n\n    handleSubmit();\n  }, []);\n\n  const handleSelect = id => {\n    let newSelected = { ...selected\n    };\n\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    }\n\n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      } //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n\n\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n\n    idTrack.current = id;\n  };\n\n  function generateCards() {\n    if (posts.length > 0) {\n      return posts.map((task, index) => /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: \"Task\" + task.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(TaskCard, {\n        selected: selected[task.id],\n        handleSelected: handleSelect,\n        id: task.id,\n        task: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }\n      })));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Appbar, {\n    title: \"Volunteer's Tasks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2 // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n    // justify=\"space-between\"\n    // spacing={{ xs: 2, md:  }}\n    ,\n    columns: {\n      xs: 4,\n      sm: 8,\n      md: 12\n    },\n    justifyContent: \"space-evenly\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, generateCards()));\n} // const mapStateToProps = (state) => {\n//   return {\n//     areas: state\n//   }\n// }\n// const mapDispatchToProps = { name: setAreas }\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(VolunteerPage)","map":{"version":3,"sources":["C:/Users/julia/OneDrive/Documentos/cop4331-helpinghand/frontend/src/components/volunteertaskspage/volunteertasks.js"],"names":["React","useState","useRef","useEffect","TaskCard","Grid","Appbar","useLocation","connect","setAreas","buildPath","require","VolunteerPage","props","location","tasks","setTasks","selected","setSelected","idTrack","user_data","JSON","parse","localStorage","getItem","user_email","id","console","log","posts","setPosts","areas","length","index","state","Object","values","taskObj","forEach","task","handleSubmit","obj","email","js","stringify","response","fetch","method","headers","body","res","text","error","e","alert","toString","handleSelect","newSelected","current","prop","generateCards","map","xs","sm","md"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport TaskCard from \"../volunteertaskcard/taskcard.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Appbar from \"../appbar/appbar.js\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { setAreas } from \"../../redux/actions\";\r\n\r\nconst buildPath = require(\"../../redux/buildPath\");\r\nexport default function VolunteerPage(props) {\r\n  const location = useLocation();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [selected, setSelected] = useState({});\r\n  let idTrack = useRef(null);\r\n  var user_data = JSON.parse(localStorage.getItem(\"user_data\"));\r\n  var user_email = user_data.id;\r\n  console.log(user_email);\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (props.areas && props.areas.length > 0) {\r\n      let index = location.state | 0;\r\n      setTasks(props.areas[index].tasks);\r\n    }\r\n  }, [props.areas]);\r\n\r\n  useEffect(() => {\r\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\r\n      let taskObj = {};\r\n      tasks.forEach((task) => (taskObj[task.id] = false));\r\n      setSelected(taskObj);\r\n    }\r\n  }, [tasks, selected]);\r\n\r\n  useEffect(() => {\r\n    async function handleSubmit() {\r\n      console.log(buildPath(\"/vol/tasks\"));\r\n      var obj = { email: user_email };\r\n      var js = JSON.stringify(obj);\r\n      console.log(js);\r\n\r\n      try {\r\n        const response = await fetch(buildPath(\"/vol/tasks\"), {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: js,\r\n        });\r\n\r\n        var res = JSON.parse(await response.text());\r\n        if (res.error != null) {\r\n          console.log(res.error);\r\n        } else {\r\n          console.log(\"success\");\r\n          //this is a check because the page might render twice and cause the call to fail\r\n          //if the call fails and res is set then the structure is different from if it returned tasks\r\n          //and we cans use the same syntax to parse it with map\r\n          if (res != \"no such user found\") {\r\n            setPosts(res);\r\n          } else {\r\n            console.log(\"User not found error\");\r\n          }\r\n          return res;\r\n        }\r\n      } catch (e) {\r\n        alert(e.toString());\r\n        return;\r\n      }\r\n    }\r\n\r\n    handleSubmit();\r\n  }, []);\r\n\r\n  const handleSelect = (id) => {\r\n    let newSelected = { ...selected };\r\n    if (idTrack.current === null) {\r\n      idTrack.current = id;\r\n    }\r\n    if (selected[id]) {\r\n      // We are leaving the task\r\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\r\n      newSelected[id] = false;\r\n      setSelected(newSelected);\r\n    } else {\r\n      // We are joining the task\r\n      if (idTrack.current !== id) {\r\n        //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\r\n      }\r\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\r\n      for (const prop in newSelected) {\r\n        newSelected[prop] = false;\r\n      }\r\n      newSelected[id] = true;\r\n      setSelected(newSelected);\r\n    }\r\n    idTrack.current = id;\r\n  };\r\n\r\n  function generateCards() {\r\n    if (posts.length > 0) {\r\n      return posts.map((task, index) => (\r\n        <Grid item key={\"Task\" + task.id}>\r\n          <TaskCard\r\n            selected={selected[task.id]}\r\n            handleSelected={handleSelect}\r\n            id={task.id}\r\n            task={task}\r\n          />\r\n        </Grid>\r\n      ));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Appbar title=\"Volunteer's Tasks\" />\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        spacing={2}\r\n        // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\r\n        // justify=\"space-between\"\r\n        // spacing={{ xs: 2, md:  }}\r\n        columns={{ xs: 4, sm: 8, md: 12 }}\r\n        justifyContent=\"space-evenly\"\r\n        alignItems=\"flex-start\"\r\n      >\r\n        {generateCards()}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n\r\n//     areas: state\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = { name: setAreas }\r\n\r\n// export default connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(VolunteerPage)\r\n"]},"metadata":{},"sourceType":"module"}