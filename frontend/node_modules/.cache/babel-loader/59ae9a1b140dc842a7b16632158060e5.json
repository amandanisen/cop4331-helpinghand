{"ast":null,"code":"var _jsxFileName = \"/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/createVolunteer/createVolunteer.js\";\nimport React, { useState } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nimport useGoogleMapsApi from '../googleapi/useGoogleMapsApi.js';\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport { geocodeByAddress, getLatLng } from 'react-google-places-autocomplete';\nimport { useHistory } from \"react-router-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\n\nconst buildPath = require('../../redux/buildPath');\n\nconst mapStyles = {\n  height: \"100vh\",\n  width: \"100%\"\n};\nconst defaultCenter = {\n  lat: 41.3851,\n  lng: 2.1734\n};\ngeocodeByAddress('Montevideo, Uruguay').then(results => getLatLng(results[0])).then(({\n  lat,\n  lng\n}) => console.log('Successfully got latitude and longitude', {\n  lat,\n  lng\n}));\nconst useStyles = makeStyles(theme => ({\n  root: { ...theme.typography.button,\n    backgroundColor: theme.palette.background.paper\n  },\n  string: {\n    marginTop: '20px',\n    marginBottom: '20px',\n    fontSize: '20px'\n  },\n  welcome: {\n    margin: '15px',\n    marginBottom: '10px',\n    fontSize: '28px',\n    fontWeight: 'bold'\n  },\n  starter: {\n    fontSize: '18px',\n    marginBottom: '60px'\n  },\n  padding: {\n    marginTop: '20px',\n    marginBottom: '20px'\n  },\n  button: {\n    width: '200px',\n    height: '60px',\n    fontSize: '22px',\n    background: '#27AE60',\n    boxShadow: '0px 4px 4px rgba(154, 154, 154, 0.25)',\n    radius: '10px',\n    color: '#FFFFFF'\n  },\n  smallbutton: {\n    marginTop: '20px',\n    width: '120px',\n    height: '40px',\n    fontSize: '13px',\n    background: '#27AE60',\n    boxShadow: '0px 4px 4px rgba(154, 154, 154, 0.25)',\n    radius: '10px',\n    color: '#FFFFFF'\n  },\n  image: {\n    marginTop: '15px',\n    height: '200px'\n  },\n  link: {\n    alignItems: \"center\",\n    color: \"#27AE60\"\n  }\n})); // geocodeByAddress('UCF, Central Florida Blvd, Orlando, FL, USA')\n// .then(results => getLatLng(results[0]))\n// .then(({ lat, lng }) =>\n//     console.log('Successfully got latitude and longitude', { lat, lng })\n// );\n\nexport default function CreateVolunteer() {\n  const apiKey = 'AIzaSyCVF0U1KIXIVF3WkEhJ84Ps3EnlKt4NtO4';\n  const [location, setLocation] = useState('');\n  const [coordinates, setCoordinates] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password1, setPassword1] = useState('');\n  const [password2, setPassword2] = useState('');\n  const [longitude, setLongitude] = useState(0);\n  const [latitude, setLatitude] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [message, setMessage] = useState(''); // const autocomplete = new google.maps.places.Autocomplete(input, options);\n  // var place = GooglePlacesAutocomplete.location.lat();\n  // var lat = place.geometry.location.lat(),\n  // lng = place.geometry.location.lng();\n  // Then do whatever you want with them\n  // console.log(place);\n  // console.log(lng);\n\n  console.log(location);\n  console.log(coordinates);\n  const classes = useStyles();\n  let history = useHistory();\n\n  async function handleRegistration(event) {\n    event.preventDefault();\n    var obj = {\n      email: email,\n      password1: password1,\n      password2: password2,\n      first_name: firstName,\n      last_name: lastName,\n      longitude: longitude,\n      latitude: latitude,\n      accepted_distance: distance\n    };\n    var js = JSON.stringify(obj);\n\n    try {\n      const response = await fetch(buildPath('/vol/register'), {\n        method: 'POST',\n        body: js,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      var res = JSON.parse(await response.text());\n\n      if (res.id == -1) {\n        alert(JSON.stringify(res.error));\n      } else {\n        var user = {\n          first_name: res.first_name,\n          last_name: res.last_name,\n          id: res.id\n        };\n        localStorage.setItem('user_data', JSON.stringify(user));\n        setMessage('');\n        history.push('/');\n      }\n    } catch (e) {\n      alert(e.toString());\n      return;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Appbar, {\n    title: \"Volunteer\",\n    type: \"Volunteer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"space-between\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.welcome,\n    variant: \"h4\",\n    component: \"h4\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }, \"Volunteer Registration\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"filled-bare\",\n    placeholder: \"First Name\",\n    margin: \"normal\",\n    variant: \"filled\",\n    onChange: e => setFirstName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"filled-bare\",\n    placeholder: \"Last Name\",\n    margin: \"normal\",\n    variant: \"filled\",\n    onChange: e => setLastName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"filled-bare\",\n    placeholder: \"Email\",\n    margin: \"normal\",\n    variant: \"filled\",\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"filled-bare\",\n    placeholder: \"Password\",\n    margin: \"normal\",\n    variant: \"filled\",\n    onChange: e => setPassword1(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"filled-bare\",\n    placeholder: \"Confirm Password\",\n    margin: \"normal\",\n    variant: \"filled\",\n    onChange: e => setPassword2(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(GooglePlacesAutocomplete, {\n    selectProps: {\n      location,\n      onChange: setLocation\n    },\n    placeholder: \"Event Location\",\n    minLength: 2 // minimum length of text to search\n    ,\n    autoFocus: false,\n    apiOptions: {\n      language: 'en',\n      region: 'us'\n    } // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\n    ,\n    listViewDisplayed: \"auto\" // true/false/undefined\n    ,\n    apiKey: \"AIzaSyCVF0U1KIXIVF3WkEhJ84Ps3EnlKt4NtO4\",\n    fetchDetails: true,\n    renderDescription: row => row.description // custom description render\n    ,\n    onPress: (data, details = null) => {\n      // 'details' is provided when fetchDetails = true\n      console.log(data, details);\n    } // onPress={(data, details = null) => {\n    //     console.warn(data, details);\n    //     // 'details' is provided when fetchDetails = true\n    //     this.setState(\n    //       {\n    //         location: data.description, // selected address\n    //         coordinates: `${details.geometry.location.lat},${details.geometry.location.lng}` // selected coordinates\n    //       }\n    //     );\n    //   }}\n    //   textInputProps={{\n    //     onChangeText: (text) => { console.log(text) }\n    //   }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"filled-bare\",\n    placeholder: \"Minimum distance of task\",\n    margin: \"normal\",\n    variant: \"filled\",\n    onChange: e => setDistance(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: classes.smallbutton,\n    onClick: handleRegistration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/createVolunteer/createVolunteer.js"],"names":["React","useState","makeStyles","Grid","Appbar","useGoogleMapsApi","GooglePlacesAutocomplete","geocodeByAddress","getLatLng","useHistory","Typography","TextField","Button","GoogleMap","LoadScript","buildPath","require","mapStyles","height","width","defaultCenter","lat","lng","then","results","console","log","useStyles","theme","root","typography","button","backgroundColor","palette","background","paper","string","marginTop","marginBottom","fontSize","welcome","margin","fontWeight","starter","padding","boxShadow","radius","color","smallbutton","image","link","alignItems","CreateVolunteer","apiKey","location","setLocation","coordinates","setCoordinates","firstName","setFirstName","lastName","setLastName","email","setEmail","password1","setPassword1","password2","setPassword2","longitude","setLongitude","latitude","setLatitude","distance","setDistance","message","setMessage","classes","history","handleRegistration","event","preventDefault","obj","first_name","last_name","accepted_distance","js","JSON","stringify","response","fetch","method","body","headers","res","parse","text","id","alert","error","user","localStorage","setItem","push","e","toString","target","value","onChange","language","region","row","description","data","details"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nimport useGoogleMapsApi from '../googleapi/useGoogleMapsApi.js'\nimport GooglePlacesAutocomplete from 'react-google-places-autocomplete';\nimport { geocodeByAddress, getLatLng } from 'react-google-places-autocomplete';\n\n\nimport { useHistory } from \"react-router-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\n\nconst buildPath = require('../../redux/buildPath');\n\nconst mapStyles = {        \n    height: \"100vh\",\n    width: \"100%\"};\n  const defaultCenter = {\n    lat: 41.3851, lng: 2.1734\n  }\n  \n\n\n  geocodeByAddress('Montevideo, Uruguay')\n  .then(results => getLatLng(results[0]))\n  .then(({ lat, lng }) =>\n    console.log('Successfully got latitude and longitude', { lat, lng })\n  );\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        ...theme.typography.button,\n        backgroundColor: theme.palette.background.paper,\n    },\n    string: {\n        marginTop: '20px',\n        marginBottom: '20px',\n        fontSize: '20px',\n    },\n    welcome: {\n        margin: '15px',\n        marginBottom: '10px',\n        fontSize: '28px',\n        fontWeight: 'bold',\n    },\n    starter: {\n        fontSize: '18px',\n        marginBottom: '60px',\n\n    },\n    padding: {\n        marginTop: '20px',\n        marginBottom: '20px',\n    },\n    button: {\n        width: '200px',\n        height: '60px',\n        fontSize: '22px',\n        background: '#27AE60',\n        boxShadow: '0px 4px 4px rgba(154, 154, 154, 0.25)',\n        radius: '10px',\n        color: '#FFFFFF'\n    },\n    smallbutton: { \n        marginTop:'20px',\n        width: '120px',\n        height: '40px',\n        fontSize: '13px',\n        background: '#27AE60',\n        boxShadow: '0px 4px 4px rgba(154, 154, 154, 0.25)',\n        radius: '10px',\n        color: '#FFFFFF'\n    },\n    image: {\n        marginTop: '15px',\n        height: '200px',\n    },\n    link: {\n        alignItems: \"center\",\n        color: \"#27AE60\",\n    }\n\n}));\n\n// geocodeByAddress('UCF, Central Florida Blvd, Orlando, FL, USA')\n// .then(results => getLatLng(results[0]))\n// .then(({ lat, lng }) =>\n//     console.log('Successfully got latitude and longitude', { lat, lng })\n// );\n\nexport default function CreateVolunteer() {\n    const apiKey = 'AIzaSyCVF0U1KIXIVF3WkEhJ84Ps3EnlKt4NtO4';\n    const [location, setLocation] = useState(''); \n    const [coordinates, setCoordinates] = useState(''); \n\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password1, setPassword1] = useState('');\n    const [password2, setPassword2] = useState('');\n    const [longitude, setLongitude] = useState(0);\n    const [latitude, setLatitude] = useState(0);\n    const [distance, setDistance] = useState(0);\n    const [message, setMessage] = useState('');\n\n    \n    // const autocomplete = new google.maps.places.Autocomplete(input, options);\n\n    // var place = GooglePlacesAutocomplete.location.lat();\n\n    // var lat = place.geometry.location.lat(),\n    // lng = place.geometry.location.lng();\n\n    // Then do whatever you want with them\n\n    // console.log(place);\n    // console.log(lng);\n    console.log(location);\n    console.log(coordinates);\n\n   \n\n    const classes = useStyles();\n    let history = useHistory();\n\n    async function handleRegistration(event)\n    {\n        event.preventDefault();\n        var obj = {email: email, password1: password1, password2: password2, first_name: firstName, \n            last_name: lastName, longitude: longitude, latitude: latitude, accepted_distance: distance};\n\n        var js = JSON.stringify(obj);\n\n        try\n        {\n            const response = await fetch(buildPath('/vol/register'), {method: 'POST',\n                body: js, headers:{'Content-Type':'application/json'}});\n\n            var res = JSON.parse(await response.text());\n\n            if (res.id == -1)\n            {\n                alert(JSON.stringify(res.error));\n            }\n            else\n            {\n                var user = {first_name: res.first_name, last_name: res.last_name, id: res.id};\n                localStorage.setItem('user_data', JSON.stringify(user));\n\n                setMessage('');\n                history.push('/');\n            }\n        }\n        catch(e)\n        {\n            alert(e.toString());\n            return;\n        }\n    }\n\n    return (\n        <div>\n            \n            <Appbar title=\"Volunteer\" type=\"Volunteer\"/>\n            <Grid\n                container\n                direction=\"column\"\n                justify=\"space-between\"\n                alignItems=\"center\"\n            >\n            {/* <Grid item>\n            <img className={classes.image} src=\"/images/volunteer.png\"></img>\n            </Grid> */}\n                <Grid item>\n                    <Typography className={classes.welcome} variant=\"h4\" component=\"h4\" align=\"center\">Volunteer Registration</Typography>\n                </Grid>\n                <Grid item>\n                    <TextField\n                        required\n                        id=\"filled-bare\"\n                        placeholder={\"First Name\"}\n                        margin=\"normal\"\n                        variant=\"filled\"\n                        onChange={(e)=> setFirstName(e.target.value)}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        required\n                        id=\"filled-bare\"\n                        placeholder={\"Last Name\"}\n                        margin=\"normal\"\n                        variant=\"filled\"\n                        onChange={(e)=> setLastName(e.target.value)}\n                    />\n                </Grid>\n                <Grid item>\n                <TextField\n                    required\n                    id=\"filled-bare\"\n                    placeholder={\"Email\"}\n                    margin=\"normal\"\n                    variant=\"filled\"\n                    onChange={(e)=> setEmail(e.target.value)}\n                />\n                </Grid>\n                <Grid item>\n                <TextField\n                    required\n                    id=\"filled-bare\"\n                    placeholder={\"Password\"}\n                    margin=\"normal\"\n                    variant=\"filled\"\n                    onChange={(e)=> setPassword1(e.target.value)}\n                />\n                </Grid>\n                <Grid item>\n                <TextField\n                    required\n                    id=\"filled-bare\"\n                    placeholder={\"Confirm Password\"}\n                    margin=\"normal\"\n                    variant=\"filled\"\n                    onChange={(e)=> setPassword2(e.target.value)}\n                />\n                </Grid>\n                {/* <Grid item> */}\n                    <GooglePlacesAutocomplete\n                        selectProps={{\n                            location,\n                            onChange: setLocation,\n                        }}\n                        \n                        placeholder='Event Location'\n                        minLength={2} // minimum length of text to search\n                        autoFocus={false}\n                        apiOptions={{ language: 'en', region: 'us' }}\n                        // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\n                        listViewDisplayed='auto'    // true/false/undefined\n                        apiKey=\"AIzaSyCVF0U1KIXIVF3WkEhJ84Ps3EnlKt4NtO4\"\n                        fetchDetails={true}\n                        renderDescription={row => row.description} // custom description render\n                        onPress={(data, details = null) => { // 'details' is provided when fetchDetails = true\n                          console.log(data, details);\n                        }}\n                        // onPress={(data, details = null) => {\n                        //     console.warn(data, details);\n                        //     // 'details' is provided when fetchDetails = true\n                        //     this.setState(\n                        //       {\n                        //         location: data.description, // selected address\n                        //         coordinates: `${details.geometry.location.lat},${details.geometry.location.lng}` // selected coordinates\n                        //       }\n                        //     );\n                        //   }}\n                        //   textInputProps={{\n                        //     onChangeText: (text) => { console.log(text) }\n                        //   }}\n                    />\n                {/* </Grid> */}\n            <Grid item>\n              {/* <TextField\n                required\n                id=\"filled-bare\"\n                placeholder={\"Latitude\"}\n                margin=\"normal\"\n                variant=\"filled\"\n                onChange={(e)=> setLatitude(e.target.value)}\n               /> */}\n            </Grid>\n            <Grid item>\n              <TextField\n                required\n                id=\"filled-bare\"\n                placeholder={\"Minimum distance of task\"}\n                margin=\"normal\"\n                variant=\"filled\"\n                onChange={(e)=> setDistance(e.target.value)}\n               />   \n            </Grid>\n            <Grid item>\n            <Button \n                className={classes.smallbutton}\n                onClick={handleRegistration}>Submit\n            </Button>\n            </Grid>\n            </Grid>\n        </div>\n    )\n\n}\n"]},"metadata":{},"sourceType":"module"}