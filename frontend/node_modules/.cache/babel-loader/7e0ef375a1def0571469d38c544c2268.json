{"ast":null,"code":"var _jsxFileName = \"/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/coordinatorpage/coordinatorpage.js\";\nimport React from \"react\";\nimport TaskCard from '../volunteertaskcard/taskcard.js';\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nexport default function CoordinatorPage() {\n  const location = useLocation();\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas]);\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach(task => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected]); //TODO: CALL API TO GET TASKS WITHIN THAT USER\n\n  const taskAdded = [{\n    id: \"4\",\n    name: \"Feed the Homeless 2.0\",\n    location: \"Downtown Orlando 2.0\",\n    miles: \"2.6 miles\",\n    description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 2.0\",\n    numVol: \"2\",\n    maxVol: \"2\",\n    done: \"false\"\n  }, {\n    id: \"5\",\n    name: \"Feed the Homeless 3.0\",\n    location: \"Downtown Orlando 3.0\",\n    miles: \"3.6 miles\",\n    description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 3.0\",\n    numVol: \"3\",\n    maxVol: \"4\",\n    done: \"false\"\n  }];\n\n  const handleSelect = id => {\n    let newSelected = { ...selected\n    };\n\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    }\n\n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      } //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n\n\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n\n    idTrack.current = id;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Appbar, {\n    title: \"Coordinator's Task Created\",\n    type: \"coordinator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2 // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n    // justify=\"space-between\"\n    // spacing={{ xs: 2, md:  }}\n    ,\n    columns: {\n      xs: 4,\n      sm: 8,\n      md: 12\n    },\n    justifyContent: \"space-evenly\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, taskAdded.map((task, index) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: \"Task\" + task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TaskCard, {\n    selected: selected[task.id],\n    handleSelected: handleSelect,\n    id: task.id,\n    task: task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/coordinatorpage/coordinatorpage.js"],"names":["React","TaskCard","Grid","Appbar","CoordinatorPage","location","useLocation","tasks","setTasks","useState","selected","setSelected","idTrack","useRef","useEffect","props","areas","length","index","state","Object","values","taskObj","forEach","task","id","taskAdded","name","miles","description","numVol","maxVol","done","handleSelect","newSelected","current","prop","xs","sm","md","map"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport TaskCard from '../volunteertaskcard/taskcard.js'\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\n\nexport default function CoordinatorPage() {\n    const location = useLocation();\n    const [tasks, setTasks] = useState([]);\n    const [selected, setSelected] = useState({});\n    let idTrack = useRef(null);\n\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas])\n\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach((task) => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected])\n\n\n  //TODO: CALL API TO GET TASKS WITHIN THAT USER\n  const taskAdded = [\n    {\n      id: \"4\",\n      name: \"Feed the Homeless 2.0\",\n      location: \"Downtown Orlando 2.0\",\n      miles:\"2.6 miles\",\n      description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 2.0\",\n      numVol: \"2\",\n      maxVol: \"2\",\n      done: \"false\"\n    },\n    {\n      id: \"5\",\n      name: \"Feed the Homeless 3.0\",\n      location: \"Downtown Orlando 3.0\",\n      miles:\"3.6 miles\",\n      description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 3.0\",\n      numVol: \"3\",\n      maxVol: \"4\",\n      done: \"false\"\n    }\n  ]\n\n  const handleSelect = (id) => {\n    let newSelected = { ...selected };\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    } \n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {\n        //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      }\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n    idTrack.current = id;\n  }\n\n    return (\n        <div>\n            <Appbar title=\"Coordinator's Task Created\" type=\"coordinator\"/>\n      <Grid\n          container\n          direction=\"row\"\n          spacing={2}\n          // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n          // justify=\"space-between\"\n          // spacing={{ xs: 2, md:  }}\n          columns={{ xs: 4, sm: 8, md: 12 }}\n          justifyContent=\"space-evenly\"\n          alignItems=\"flex-start\"\n      >\n        {taskAdded.map((task, index) =>\n          <Grid item key={\"Task\"+task.id}>\n            <TaskCard selected={selected[task.id]} handleSelected={handleSelect} id={task.id} task={task}/>\n          </Grid>\n        )}\n      </Grid >\n        </div>\n    )\n\n}\n"]},"metadata":{},"sourceType":"module"}