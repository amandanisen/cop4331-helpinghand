{"ast":null,"code":"var _jsxFileName = \"/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/tasknearpage/tasknearpage.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AreaCard from \"../tasknearcard/tasknearcard.js\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Appbar from \"../appbar/appbar.js\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from \"../../redux/actions.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nconst buildPath = require(\"../../redux/buildPath\");\n\nfunction FindTask(props) {\n  const location = useLocation();\n  const [areas, setAreas] = useState([]);\n  var user_data = JSON.parse(localStorage.getItem(\"user_data\"));\n  var user_email = user_data.id;\n  console.log(user_email);\n  const [posts, setPosts] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas]);\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach(task => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected]);\n  useEffect(() => {\n    async function handleSubmit() {\n      console.log(buildPath(\"/vol/tasks\"));\n      console.log(user_data);\n      var obj = {\n        email: user_email\n      };\n      var js = JSON.stringify(obj);\n      console.log(js); // try {\n      // \tconst response = await fetch(buildPath(\"/task/find\"), {\n      // \t\tmethod: \"POST\",\n      // \t\theaders: { \"Content-Type\": \"application/json\" },\n      // \t\tbody: js,\n      // \t});\n      // var res = JSON.parse(await response.text());\n      // if (res.error != null) {\n      // \tconsole.log(res.error);\n      // } else {\n      // \tconsole.log(\"success\");\n      // \t//this is a check because the page might render twice and cause the call to fail\n      // \t//if the call fails and res is set then the structure is different from if it returned tasks\n      // \t//and we cans use the same syntax to parse it with map\n      // \tif (res != \"no such user found\") {\n      // \t\tsetPosts(res);\n      // \t} else {\n      // \t\tconsole.log(\"User not found error\");\n      // \t}\n      // \treturn res;\n      // }\n      // } catch (e) {\n      // \talert(e.toString());\n      // \treturn;\n      // }\n    }\n\n    handleSubmit();\n  }, []);\n\n  const handleSelect = id => {\n    let newSelected = { ...selected\n    };\n\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    }\n\n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      } //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n\n\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n\n    idTrack.current = id;\n  };\n\n  function generateCards() {\n    if (posts.length > 0) {\n      return posts.map((task, index) => /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: \"Task\" + task.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(AreaCard, {\n        selected: selected[task.id],\n        handleSelected: handleSelect,\n        id: task.id,\n        task: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 6\n        }\n      })));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Appbar, {\n    title: \"Volunteer Tasks Near You\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2 // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n    // justify=\"space-between\"\n    // spacing={{ xs: 2, md:  }}\n    ,\n    columns: {\n      xs: 4,\n      sm: 8,\n      md: 12\n    },\n    justifyContent: \"space-evenly\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 4\n    }\n  }, generateCards()));\n}\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    areas: state.areas\n  };\n};\n\nconst mapDispatchToProps = {\n  areaAction: setAreas\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(FindTask);","map":{"version":3,"sources":["/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/tasknearpage/tasknearpage.js"],"names":["React","useState","useEffect","useRef","AreaCard","Grid","Appbar","connect","setAreas","useLocation","useHistory","buildPath","require","FindTask","props","location","areas","user_data","JSON","parse","localStorage","getItem","user_email","id","console","log","posts","setPosts","tasks","setTasks","selected","setSelected","idTrack","length","index","state","Object","values","taskObj","forEach","task","handleSubmit","obj","email","js","stringify","handleSelect","newSelected","current","prop","generateCards","map","xs","sm","md","mapStateToProps","mapDispatchToProps","areaAction"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport AreaCard from \"../tasknearcard/tasknearcard.js\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Appbar from \"../appbar/appbar.js\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from \"../../redux/actions.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom\";\nconst buildPath = require(\"../../redux/buildPath\");\n\nfunction FindTask(props) {\n\tconst location = useLocation();\n\n\tconst [areas, setAreas] = useState([]);\n\tvar user_data = JSON.parse(localStorage.getItem(\"user_data\"));\n\tvar user_email = user_data.id;\n\tconsole.log(user_email);\n\tconst [posts, setPosts] = useState([]);\n\tconst [tasks, setTasks] = useState([]);\n\tconst [selected, setSelected] = useState({});\n\tlet idTrack = useRef(null);\n\n\tuseEffect(() => {\n\t\tif (props.areas && props.areas.length > 0) {\n\t\t\tlet index = location.state | 0;\n\t\t\tsetTasks(props.areas[index].tasks);\n\t\t}\n\t}, [props.areas]);\n\n\tuseEffect(() => {\n\t\tif (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n\t\t\tlet taskObj = {};\n\t\t\ttasks.forEach((task) => (taskObj[task.id] = false));\n\t\t\tsetSelected(taskObj);\n\t\t}\n\t}, [tasks, selected]);\n\n\tuseEffect(() => {\n\t\tasync function handleSubmit() {\n\t\t\tconsole.log(buildPath(\"/vol/tasks\"));\n\t\t\tconsole.log(user_data);\n\t\t\tvar obj = { email: user_email };\n\t\t\tvar js = JSON.stringify(obj);\n\t\t\tconsole.log(js);\n\n\t\t\t// try {\n\t\t\t// \tconst response = await fetch(buildPath(\"/task/find\"), {\n\t\t\t// \t\tmethod: \"POST\",\n\t\t\t// \t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t// \t\tbody: js,\n\t\t\t// \t});\n\n\t\t\t// var res = JSON.parse(await response.text());\n\t\t\t// if (res.error != null) {\n\t\t\t// \tconsole.log(res.error);\n\t\t\t// } else {\n\t\t\t// \tconsole.log(\"success\");\n\t\t\t// \t//this is a check because the page might render twice and cause the call to fail\n\t\t\t// \t//if the call fails and res is set then the structure is different from if it returned tasks\n\t\t\t// \t//and we cans use the same syntax to parse it with map\n\t\t\t// \tif (res != \"no such user found\") {\n\t\t\t// \t\tsetPosts(res);\n\t\t\t// \t} else {\n\t\t\t// \t\tconsole.log(\"User not found error\");\n\t\t\t// \t}\n\t\t\t// \treturn res;\n\t\t\t// }\n\t\t\t// } catch (e) {\n\t\t\t// \talert(e.toString());\n\t\t\t// \treturn;\n\t\t\t// }\n\t\t}\n\n\t\thandleSubmit();\n\t}, []);\n\n\tconst handleSelect = (id) => {\n\t\tlet newSelected = { ...selected };\n\t\tif (idTrack.current === null) {\n\t\t\tidTrack.current = id;\n\t\t}\n\t\tif (selected[id]) {\n\t\t\t// We are leaving the task\n\t\t\t//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n\t\t\tnewSelected[id] = false;\n\t\t\tsetSelected(newSelected);\n\t\t} else {\n\t\t\t// We are joining the task\n\t\t\tif (idTrack.current !== id) {\n\t\t\t\t//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n\t\t\t}\n\t\t\t//Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n\t\t\tfor (const prop in newSelected) {\n\t\t\t\tnewSelected[prop] = false;\n\t\t\t}\n\t\t\tnewSelected[id] = true;\n\t\t\tsetSelected(newSelected);\n\t\t}\n\t\tidTrack.current = id;\n\t};\n\n\tfunction generateCards() {\n\t\tif (posts.length > 0) {\n\t\t\treturn posts.map((task, index) => (\n\t\t\t\t<Grid item key={\"Task\" + task.id}>\n\t\t\t\t\t<AreaCard\n\t\t\t\t\t\tselected={selected[task.id]}\n\t\t\t\t\t\thandleSelected={handleSelect}\n\t\t\t\t\t\tid={task.id}\n\t\t\t\t\t\ttask={task}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t));\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Appbar title=\"Volunteer Tasks Near You\" />\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tdirection=\"row\"\n\t\t\t\tspacing={2}\n\t\t\t\t// columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n\t\t\t\t// justify=\"space-between\"\n\t\t\t\t// spacing={{ xs: 2, md:  }}\n\t\t\t\tcolumns={{ xs: 4, sm: 8, md: 12 }}\n\t\t\t\tjustifyContent=\"space-evenly\"\n\t\t\t\talignItems=\"flex-start\"\n\t\t\t>\n\t\t\t\t{generateCards()}\n\t\t\t\t{/* {areasTest.map((area, index) => (\n\t\t\t\t\t<Grid item key={\"area\" + area.id}>\n\t\t\t\t\t\t<AreaCard\n\t\t\t\t\t\t\tname={area.name}\n\t\t\t\t\t\t\tlocation={area.location}\n\t\t\t\t\t\t\tnumVol={area.numVol}\n\t\t\t\t\t\t\tmaxVol={area.maxVol}\n\t\t\t\t\t\t\tdescription={area.description}\n\t\t\t\t\t\t\tmiles={area.miles}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t))} */}\n\t\t\t</Grid>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = (state) => {\n\tconsole.log(state);\n\treturn {\n\t\tareas: state.areas,\n\t};\n};\n\nconst mapDispatchToProps = { areaAction: setAreas };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindTask);\n"]},"metadata":{},"sourceType":"module"}