{"ast":null,"code":"var _jsxFileName = \"/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/volunteertaskspage/volunteertasks.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport TaskCard from '../volunteertaskcard/taskcard.js';\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from '../../redux/actions';\nexport default function VolunteerPage(props) {\n  const location = useLocation();\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas]);\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach(task => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected]); //TODO: CALL API TO GET TASKS WITHIN THAT USER\n\n  const handleSelect = id => {\n    let newSelected = { ...selected\n    };\n\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    }\n\n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      } //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n\n\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n\n    idTrack.current = id;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Appbar, {\n    title: \"Volunteer's Tasks Summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2 // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n    // justify=\"space-between\"\n    // spacing={{ xs: 2, md:  }}\n    ,\n    columns: {\n      xs: 4,\n      sm: 8,\n      md: 12\n    },\n    justifyContent: \"space-evenly\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, taskAdded.map((task, index) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: \"Task\" + task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TaskCard, {\n    selected: selected[task.id],\n    handleSelected: handleSelect,\n    id: task.id,\n    task: task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  })))));\n} // const mapStateToProps = (state) => {\n//   return {\n//     areas: state\n//   }\n// }\n// const mapDispatchToProps = { name: setAreas }\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(VolunteerPage)","map":{"version":3,"sources":["/Users/amandanisenbaum/cop4331-helpinghand-desk/frontend/src/components/volunteertaskspage/volunteertasks.js"],"names":["React","useState","useRef","useEffect","TaskCard","Grid","Appbar","useLocation","connect","setAreas","VolunteerPage","props","location","tasks","setTasks","selected","setSelected","idTrack","areas","length","index","state","Object","values","taskObj","forEach","task","id","handleSelect","newSelected","current","prop","xs","sm","md","taskAdded","map"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\nimport TaskCard from '../volunteertaskcard/taskcard.js'\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from '../../redux/actions';\n\nexport default function VolunteerPage(props) {\n  const location = useLocation();\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas])\n\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach((task) => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected])\n\n\n  //TODO: CALL API TO GET TASKS WITHIN THAT USER\n \n\n  const handleSelect = (id) => {\n    let newSelected = { ...selected };\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    } \n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {\n        //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      }\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n    idTrack.current = id;\n  }\n\n\n\n  return (\n    <div>\n      <Appbar title=\"Volunteer's Tasks Summary\" />\n      <Grid\n          container\n          direction=\"row\"\n          spacing={2}\n          // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n          // justify=\"space-between\"\n          // spacing={{ xs: 2, md:  }}\n          columns={{ xs: 4, sm: 8, md: 12 }}\n          justifyContent=\"space-evenly\"\n          alignItems=\"flex-start\"\n      >\n        {taskAdded.map((task, index) =>\n          <Grid item key={\"Task\"+task.id}>\n            <TaskCard selected={selected[task.id]} handleSelected={handleSelect} id={task.id} task={task}/>\n          </Grid>\n        )}\n      </Grid >\n    </div>\n  )\n}\n\n// const mapStateToProps = (state) => {\n//   return {\n    \n//     areas: state\n//   }\n// }\n\n// const mapDispatchToProps = { name: setAreas }\n\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(VolunteerPage)\n"]},"metadata":{},"sourceType":"module"}