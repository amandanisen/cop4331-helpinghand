{"ast":null,"code":"var _jsxFileName = \"/Users/lawrenceoconnor/Documents/GitHub/cop4331-helpinghand/frontend/src/components/volunteertaskspage/volunteertasks.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport TaskCard from '../volunteertaskcard/taskcard.js';\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from '../../redux/actions';\n\nconst buildPath = require(\"../../redux/buildPath\");\n\nexport default function VolunteerPage(props) {\n  const location = useLocation();\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas]);\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach(task => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected]);\n  useEffect(() => {\n    const response = fetch(buildPath(\"/vol/tasks\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: js\n    });\n    var obj = {\n      email: \"amanda.nisen@gmail.com\"\n    };\n    var js = JSON.stringify(obj);\n    console.log(js);\n  }, [posts]); //TODO: CALL API TO GET TASKS WITHIN THAT USER\n\n  const taskAdded = [{\n    id: \"4\",\n    name: \"Feed the Homeless 2.0\",\n    location: \"Downtown Orlando 2.0\",\n    miles: \"2.6 miles\",\n    description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 2.0\",\n    numVol: \"2\",\n    maxVol: \"2\",\n    done: \"false\"\n  }, {\n    id: \"5\",\n    name: \"Feed the Homeless 3.0\",\n    location: \"Downtown Orlando 3.0\",\n    miles: \"3.6 miles\",\n    description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 3.0\",\n    numVol: \"3\",\n    maxVol: \"4\",\n    done: \"false\"\n  }];\n\n  const handleSelect = id => {\n    let newSelected = { ...selected\n    };\n\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    }\n\n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {//Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      } //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n\n\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n\n    idTrack.current = id;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Appbar, {\n    title: \"Volunteer's Tasks edits saved\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2 // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n    // justify=\"space-between\"\n    // spacing={{ xs: 2, md:  }}\n    ,\n    columns: {\n      xs: 4,\n      sm: 8,\n      md: 12\n    },\n    justifyContent: \"space-evenly\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, taskAdded.map((task, index) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    key: \"Task\" + task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TaskCard, {\n    selected: selected[task.id],\n    handleSelected: handleSelect,\n    id: task.id,\n    task: task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  })))));\n} // const mapStateToProps = (state) => {\n//   return {\n//     areas: state\n//   }\n// }\n// const mapDispatchToProps = { name: setAreas }\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(VolunteerPage)","map":{"version":3,"sources":["/Users/lawrenceoconnor/Documents/GitHub/cop4331-helpinghand/frontend/src/components/volunteertaskspage/volunteertasks.js"],"names":["React","useState","useRef","useEffect","TaskCard","Grid","Appbar","useLocation","connect","setAreas","buildPath","require","VolunteerPage","props","location","tasks","setTasks","selected","setSelected","idTrack","posts","setPosts","areas","length","index","state","Object","values","taskObj","forEach","task","id","response","fetch","method","headers","body","js","obj","email","JSON","stringify","console","log","taskAdded","name","miles","description","numVol","maxVol","done","handleSelect","newSelected","current","prop","xs","sm","md","map"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"\nimport TaskCard from '../volunteertaskcard/taskcard.js'\nimport Grid from '@material-ui/core/Grid';\nimport Appbar from \"../appbar/appbar.js\";\nimport { useLocation } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { setAreas } from '../../redux/actions';\n\nconst buildPath = require(\"../../redux/buildPath\");\nexport default function VolunteerPage(props) {\n  const location = useLocation();\n  const [tasks, setTasks] = useState([]);\n  const [selected, setSelected] = useState({});\n  let idTrack = useRef(null);\n\n  const [posts, setPosts] = useState([]);\n  \n  useEffect(() => {\n    if (props.areas && props.areas.length > 0) {\n      let index = location.state | 0;\n      setTasks(props.areas[index].tasks);\n    }\n  }, [props.areas])\n\n  useEffect(() => {\n    if (tasks && tasks.length > 0 && Object.values(selected).length === 0) {\n      let taskObj = {};\n      tasks.forEach((task) => taskObj[task.id] = false);\n      setSelected(taskObj);\n    }\n  }, [tasks, selected])\n\n\n  useEffect(() => {\n    const response = fetch(buildPath(\"/vol/tasks\"), {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: js,\n    });\n\n    var obj = { email: \"amanda.nisen@gmail.com\" };\n    var js = JSON.stringify(obj);\n    console.log(js);\n  }, [posts])\n\n\n\n  //TODO: CALL API TO GET TASKS WITHIN THAT USER\n  const taskAdded = [\n    {\n      id: \"4\",\n      name: \"Feed the Homeless 2.0\",\n      location: \"Downtown Orlando 2.0\",\n      miles:\"2.6 miles\",\n      description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 2.0\",\n      numVol: \"2\",\n      maxVol: \"2\",\n      done: \"false\"\n    },\n    {\n      id: \"5\",\n      name: \"Feed the Homeless 3.0\",\n      location: \"Downtown Orlando 3.0\",\n      miles:\"3.6 miles\",\n      description: \"This is a description of feed the homeless. Need 8 participants to help go around DT Orlando to feed. 3.0\",\n      numVol: \"3\",\n      maxVol: \"4\",\n      done: \"false\"\n    }\n  ]\n      \n\n  const handleSelect = (id) => {\n    let newSelected = { ...selected };\n    if (idTrack.current === null) {\n      idTrack.current = id;\n    } \n    if (selected[id]) {\n      // We are leaving the task\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: id, action: \"Leaving\"}}));\n      newSelected[id] = false;\n      setSelected(newSelected);\n    } else {\n      // We are joining the task\n      if (idTrack.current !== id) {\n        //Socket.send(JSON.stringify({topic: \"task\", action: \"leave\", message: {id: idTrack.current, action: \"Leaving\"}}));\n      }\n      //Socket.send(JSON.stringify({topic: \"task\", action: \"join\", message: {id: id, action: \"Joining\"}}));\n      for (const prop in newSelected) {\n        newSelected[prop] = false;\n      }\n      newSelected[id] = true;\n      setSelected(newSelected);\n    }\n    idTrack.current = id;\n  }\n\n  \n\n  return (\n    <div>\n      <Appbar title=\"Volunteer's Tasks edits saved\" />\n      <Grid\n          container\n          direction=\"row\"\n          spacing={2}\n          // columnSpacing={{ xs: 1, sm: 2, md: 3 }}\n          // justify=\"space-between\"\n          // spacing={{ xs: 2, md:  }}\n          columns={{ xs: 4, sm: 8, md: 12 }}\n          justifyContent=\"space-evenly\"\n          alignItems=\"flex-start\"\n      >\n   {taskAdded.map((task, index) =>\n          <Grid item key={\"Task\"+task.id}>\n            <TaskCard selected={selected[task.id]} handleSelected={handleSelect} id={task.id} task={task}/>\n          </Grid>\n        )}\n\n      </Grid >\n    </div>\n  )\n}\n\n// const mapStateToProps = (state) => {\n//   return {\n    \n//     areas: state\n//   }\n// }\n\n// const mapDispatchToProps = { name: setAreas }\n\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(VolunteerPage)\n"]},"metadata":{},"sourceType":"module"}